#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define GAME      6
#define GAMEPLUS  7
#define QWE 8

&mt {
    quick-tap-ms = <160>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <190>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <60>;
            key-positions = <0 1>;
            bindings = <&kp TAB>;
            require-prior-idle-ms = <120>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <19 31>;
            timeout-ms = <70>;
        };

        tilde_combo {
            bindings = <&kp TILDE>;
            key-positions = <0 20>;
            timeout-ms = <60>;
            require-prior-idle-ms = <100>;
        };

        enter_combo {
            bindings = <&kp ENTER>;
            key-positions = <13 12 11>;
            timeout-ms = <70>;
            require-prior-idle-ms = <100>;
        };

        enter_right_combo {
            bindings = <&kp ENTER>;
            key-positions = <16 18 17>;
            timeout-ms = <70>;
            require-prior-idle-ms = <100>;
        };

        russian_letter_ {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 9>;
            timeout-ms = <20>;
            require-prior-idle-ms = <100>;
        };

        russian_letter_x {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <8 7>;
            require-prior-idle-ms = <100>;
            timeout-ms = <20>;
        };

        umlaut_ue {
            bindings = <&kp RA(Y)>;
            key-positions = <7 17>;
        };

        umlaut_sz {
            bindings = <&kp RA(S)>;
            key-positions = <12 21>;
        };

        umlaut_ae {
            bindings = <&kp RA(Q)>;
            key-positions = <10 17>;
        };

        umlaut_oe {
            bindings = <&kp RA(P)>;
            key-positions = <17 19>;
        };
    };

    behaviors {
        mt_left: mt_left {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <170>;
            flavor = "balanced";
            hold-trigger-key-positions = <26 27 16 15 5 6 7 5 6 7 8 9 15 16 17 18 19 26 27 28 29 31 5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37 32 33 34>;
            require-prior-idle-ms = <50>;
            hold-trigger-on-release;
        };

        mt_right: mt_right {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <170>;
            flavor = "balanced";
            require-prior-idle-ms = <50>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 4 10 11 12 13 14 20 21 22 23 24 25 2 35 36 37 3 32 33 34>;
        };

        mt_thumb: mt_thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_THUMB";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <220>;
            flavor = "balanced";
            tapping-term-ms = <100>;
            require-prior-idle-ms = <0>;
        };

        mt_shift_left: mt_shift_left {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_SHIFT_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <19 26 27 29 30 31 36 37 35 36 32 33 34 5 6 7 8 9 15 16 17 18 19 26 27 28 29 31>;
            require-prior-idle-ms = <20>;
        };

        mt_shift_right: mt_shift_right {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_SHIFT_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34 35 36 37>;
            require-prior-idle-ms = <20>;
        };

        hold_sticky: hold_sticky {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_STICKY";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <220>;
        };

        mt_all: mt_all {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_ALL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            require-prior-idle-ms = <35>;
            hold-trigger-on-release;
        };

        // New tap-dance: tap = ESC, double-tap = F13 for push-to-talk
        esc_td: esc_td {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ESC_F13";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp ESCAPE>, <&kp F13>;
        };
    };

    macros {
        nav_on: nav_on {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&mo 1 &kp F13>;

            label = "NAV_ON";
        };

        nav_off: nav_off {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_release>, <&mo 1 &kp F13>;

            label = "NAV_OFF";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
                             &kp Q  &kp W                  &kp F            &kp P                    &kp B        &kp J    &kp L                     &kp U             &kp Y                   &kp SEMICOLON
                             &kp A  &mt_shift_left LALT R  &mt_left LGUI S  &mt_shift_left LSHIFT T  &kp G        &kp M    &mt_shift_right LSHIFT N  &mt_right LGUI E  &mt_shift_right LALT I  &kp O
&mt_all LEFT_CONTROL ESCAPE  &kp Z  &kp X                  &kp C            &kp D                    &kp V        &kp K    &kp H                     &kp COMMA         &kp DOT                 &kp FSLH       &mt_all RCTRL SQT
                                                           &kp BACKSPACE    &lt 1 TILDE              &kp SPACE    &kp TAB  &lt 2 GRAVE               &kp DELETE
            >;
        };

        nav_layer {
            label = "NAVI";
            bindings = <
           &kp ESCAPE  &kp UNDER       &kp UP          &kp PLUS         &kp LC(LEFT_ARROW)    &kp LC(RIGHT_ARROW)    &kp N7        &kp N8        &kp N9        &kp EQUAL
           &trans     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LC(L)    &kp RBKT    &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS
&kp TILDE  &trans     &kp PG_UP       &kp LG(DOWN)    &kp PG_DN        &kp LPAR    &kp RPAR    &kp NUMBER_1  &kp N2        &kp N3        &kp KP_MULTIPLY  &trans
                                      &trans          &trans           &trans      &kp PERIOD  &kp N0        &kp KP_COMMA
            >;
        };
        sim_layer {
            label = "SYM";
            bindings = <
        &kp EXCL     &kp AT  &kp HASH  &kp DLLR       &kp PRCNT               &kp CARET     &kp AMPS         &kp ASTERISK  &kp SQT     &kp DQT
        &kp BACKTICK &kp UNDER &kp RA(A) &trans         &trans                  &kp C_MUTE    &kp PRINTSCREEN  &trans        &trans      &kp RA(O)
&trans  &kp RA(F18)  &trans  &trans    &kp C_BRI_DEC  &kp C_BRIGHTNESS_INC    &kp C_VOL_DN  &kp C_VOL_UP     &kp C_PREV    &kp C_NEXT  &kp BSLH   &trans
                             &trans    &trans         &mo 3                   &trans        &kp C_PP         &trans
            >;
        };

        adjust_layer {
            label = "ADJ";
            bindings = <
        &sys_reset      &bt BT_CLR  &out OUT_TOG  &to GAME  &to QWE   &sys_reset   &kp F7  &kp F8  &kp F9  &kp F12
        &bootloader     &bt BT_NXT  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &caps_word  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &bt BT_CLR_ALL  &bt BT_PRV  &bt BT_SEL 3  &bt BT_SEL 4  &trans    &trans       &kp F1  &kp F2  &kp F3  &kp F10  &trans
                                    &trans        &trans  &trans    &trans       &trans  &trans
            >;
        };

        qwerty_layer {
            label = "QWE";
            bindings = <
                             &kp Q  &kp W                  &kp E            &kp R                    &kp T        &kp Y    &kp U                     &kp I             &kp O                   &kp P
                             &kp A  &mt_shift_left LALT S  &mt_left LGUI D  &mt_shift_left LSHIFT F  &kp G        &kp H    &mt_shift_right LSHIFT J  &mt_right LGUI K  &mt_shift_right LALT L  &kp SEMICOLON
&mt_all LEFT_CONTROL ESCAPE  &kp Z  &kp X                  &kp C            &kp V                    &kp B        &kp N    &kp M                     &kp COMMA         &kp DOT                 &kp FSLH       &mt_all RCTRL SQT
                                                           &kp BACKSPACE    &lt 1 TILDE              &kp SPACE    &kp TAB  &lt 2 GRAVE               &kp DELETE
            >;
        };

        gaming_layer {
            label = "GAME";
            bindings = <
            &kp Z           &kp X  &kp C      &kp V         &sl GAMEPLUS &trans  &trans  &trans  &trans  &trans
            &kp TAB         &kp Q  &kp W      &kp E         &kp R     &trans  &trans  &trans  &trans  &trans
&esc_td     &kp LEFT_SHIFT  &kp A  &kp S      &kp D         &kp F     &trans  &trans  &trans  &trans  &trans  &trans
                                   &kp LCTRL  &kp LEFT_ALT  &trans    &trans  &trans  &trans
            >;
        };

        gaming_plus_layer {
            label = "GAME+";
            bindings = <
                &kp F10  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp T     &kp RA(RC(Y))  &kp RA(RC(U))  &trans  &trans  &kp LC(RA(DEL))
                &kp L    &kp O         &kp Y         &kp K         &kp G     &kp F5         &kp F7         &trans  &trans  &kp F12
            &trans  &to 0    &trans        &trans        &trans        &trans    &trans         &trans         &trans  &trans  &kp F22          &kp LA(F4)
                               &kp J         &kp I         &kp M     &trans         &trans         &trans  &kp F13
            >;
        };
    };
};
